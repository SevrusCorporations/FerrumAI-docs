{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Home</p>"},{"location":"#ferrumai","title":"FerrumAI \ud83d\ude80","text":"<p>Step Towards Simplicity in Automation &amp; Data Tools</p> <p> </p>"},{"location":"#version-10-alpha","title":"Version 1.0-alpha","text":""},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83d\udcca Google Sheets Integration \u2013 fetch your datasets available on google sheets directly.</li> <li>\u26a1 Fast Data Automation \u2013 automate repetitive tasks with minimal code.</li> <li>\ud83d\udee0\ufe0f Developer-Friendly API \u2013 simple functions, clear docstrings, and autocomplete-friendly.</li> <li>\ud83d\udcda Auto-Generated Documentation \u2013 built using MkDocs and mkdocstrings.</li> <li>\ud83c\udfa8 Modern Interface \u2013 Material design for docs.</li> </ul>"},{"location":"#compatibility","title":"\ud83d\udc0d Compatibility","text":"<p>FerrumAI is tested on:</p> Python Version Status 3.10 \u2705 Supported 3.11 \u2705 Supported 3.12 \u2705 Supported"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Install via pip:</p> <pre><code>pip install ferrumai\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#ferrumai.gsheet","title":"<code>ferrumai.gsheet</code>","text":""},{"location":"usage/#ferrumai.gsheet.gsheet_load","title":"<code>gsheet_load(url, as_df=False, max_workers=None)</code>","text":"<p>Convert a Google Sheets, GitHub, or direct CSV link to a CSV-ready URL and optionally load as DataFrame(s).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | list</code> <p>URL(s) of CSV file(s).</p> required <code>as_df</code> <code>bool</code> <p>If True, return pandas DataFrame(s) instead of URL(s).</p> <code>False</code> <code>max_workers</code> <code>int | None</code> <p>Max threads for parallel downloading (only for list of URLs).</p> <code>None</code> <p>Returns:</p> Type Description <p>str | list | pd.DataFrame | list[pd.DataFrame]</p> Source code in <code>ferrumai/gsheet.py</code> <pre><code>def gsheet_load(url, as_df=False, max_workers=None):\n    \"\"\"\n    Convert a Google Sheets, GitHub, or direct CSV link to a CSV-ready URL and optionally load as DataFrame(s).\n\n    Parameters:\n        url (str | list): URL(s) of CSV file(s).\n        as_df (bool): If True, return pandas DataFrame(s) instead of URL(s).\n        max_workers (int | None): Max threads for parallel downloading (only for list of URLs).\n\n    Returns:\n        str | list | pd.DataFrame | list[pd.DataFrame]\n    \"\"\"\n\n    def convert_url(single_url):\n        parsed = urlparse(single_url)\n        netloc = parsed.netloc.lower()\n        path = parsed.path.lower()\n\n        # Google Sheets\n        if \"docs.google.com\" in netloc and \"/spreadsheets/\" in path:\n            if \"/edit\" in single_url:\n                return single_url.split(\"/edit\")[0] + \"/gviz/tq?tqx=out:csv\"\n            else:\n                return single_url\n\n        # GitHub\n        elif \"github.com\" in netloc:\n            if \"/blob/\" in single_url:\n                return single_url.replace(\"github.com\", \"raw.githubusercontent.com\").replace(\"/blob/\", \"/\")\n            return single_url  # Already raw URL\n\n        # Direct CSV link\n        else:\n            return single_url\n\n    def fetch_csv(single_url):\n        csv_url = convert_url(single_url)\n        try:\n            return pd.read_csv(csv_url)\n        except Exception as e:\n            raise RuntimeError(f\"Failed to read CSV from {single_url}: {e}\")\n\n    # Handle single URL vs list\n    if isinstance(url, list):\n        if as_df:\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                return list(executor.map(fetch_csv, url))\n        else:\n            return [convert_url(u) for u in url]\n    else:\n        converted = convert_url(url)\n        return pd.read_csv(converted) if as_df else converted\n</code></pre>"},{"location":"usage/#ferrumai.gsheet.gsheet_save","title":"<code>gsheet_save(data_frames, auto_name=True, name_series='Sheet', save_dir='.', filename=None)</code>","text":"<p>Save one or more DataFrames as CSV files.</p> <p>Parameters:</p> Name Type Description Default <code>data_frames</code> <code>DataFrame | list[DataFrame]</code> <p>Single dataframe or list of dataframes to save.</p> required <code>auto_name</code> <code>bool</code> <p>If True, generates filenames automatically using name_series + index (only for multiple frames).</p> <code>True</code> <code>name_series</code> <code>str | list</code> <p>Base name (str) or list of names (required if auto_name=False and multiple frames).</p> <code>'Sheet'</code> <code>save_dir</code> <code>str</code> <p>Directory to save CSV files. Defaults to current directory.</p> <code>'.'</code> <code>filename</code> <code>str | None</code> <p>Filename for single dataframe. Required if saving a single DataFrame.</p> <code>None</code> Source code in <code>ferrumai/gsheet.py</code> <pre><code>def gsheet_save(data_frames, auto_name=True, name_series=\"Sheet\", save_dir=\".\", filename=None):\n    \"\"\"\n    Save one or more DataFrames as CSV files.\n\n    Parameters:\n        data_frames (pd.DataFrame | list[pd.DataFrame]): Single dataframe or list of dataframes to save.\n        auto_name (bool): If True, generates filenames automatically using name_series + index (only for multiple frames).\n        name_series (str | list): Base name (str) or list of names (required if auto_name=False and multiple frames).\n        save_dir (str): Directory to save CSV files. Defaults to current directory.\n        filename (str | None): Filename for single dataframe. Required if saving a single DataFrame.\n    \"\"\"\n    # Normalize input to list\n    single_input = False\n    if isinstance(data_frames, pd.DataFrame):\n        data_frames = [data_frames]\n        single_input = True\n\n    assert data_frames, \"DATA FRAMES must not be empty!\"\n\n    # Ensure absolute save directory path\n    save_dir = os.path.abspath(save_dir)\n    os.makedirs(save_dir, exist_ok=True)\n\n    # Handle single dataframe case\n    if single_input:\n        assert filename, \"Must provide 'filename' when saving a single DataFrame\"\n        if not filename.lower().endswith(\".csv\"):\n            filename += \".csv\"\n        fpath = os.path.join(save_dir, filename)\n        data_frames[0].to_csv(fpath, index=False)\n        return  # Nothing to return\n\n    # Handle multiple dataframes\n    if auto_name:\n        if isinstance(name_series, list):\n            raise RuntimeError(\"Auto Name -&gt; True but name_series is a list! Provide a string base name instead.\")\n    else:\n        if not isinstance(name_series, list):\n            raise RuntimeError(\"Auto Name -&gt; False. Provide a list of filenames as name_series.\")\n        if len(name_series) &lt; len(data_frames):\n            raise ValueError(\"Number of filenames provided is less than number of data frames.\")\n\n    for idx, frame in enumerate(data_frames):\n        if auto_name:\n            fname = f\"{name_series}{idx}.csv\"\n        else:\n            fname = f\"{name_series[idx]}.csv\"\n        fpath = os.path.join(save_dir, fname)\n        frame.to_csv(fpath, index=False)\n</code></pre>"}]}